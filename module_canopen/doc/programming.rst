Programming Guide=================Installing the component------------------------The *CANopen Slave* component can be installed via the xSOFTip browser in the xTIMEcomposer or downloaded via http://www.xmos.com.Dependencies------------To use the module you should confirm that ``module_canopen``, ``module_can`` and ``module_mutual_thread_comm`` are present in the ``USED_MODULES`` variable in your application Makefile.File Preparation----------------canopen_conf.h++++++++++++++Have this file in your application and set the configuration defines as described below   #. CANOPEN_NODE_ID - Node ID of CANopen Slave device.   #. CANOPEN_NUMBER_OF_TPDOS_SUPPORTED - Number of transmit PDOs required by the application.   #. CANOPEN_NUMBER_OF_RPDOS_SUPPORTED - Number of receive PDOs required by the application.   #. CANOPEN_MAX_DATA_BUFFER_LENGTH - Maximum Data buffer length for data in object dictionary. Example configuration defines in canopen_conf.h file are as shown:  .. literalinclude:: module_canopen/canopen_conf_example.h    :start-after: //::Conf   :end-before: //::Conf End An example file is available in the module named ``canopen_conf_example.h``.object_dictionary.h+++++++++++++++++++Have this file in your application and set the configuration settings to the object dictionary. The object_dictionary.h file is generated based on an EDS file by using the ``od_generator.py`` script. The script is available in ``object_dictionary_generator`` folder of the module.    Once the EDS file is ready with your required device profile and required objects, run the script ``od_generator.py``. The script will generete the ``object_dictionary.h`` file based on the input NODE ID and name of the EDS file.Then add the ``object_dictionary.h`` file to the application. An example is available in the module named ``object_dictionary_example.h``.   Port I/O Setup++++++++++++++The application must define ports to use for the CAN interface. CAN ports can be defined as shown in the example below::   on tile[0]: can_ports p = {                                XS1_PORT_1L,                                 XS1_PORT_1I,                                 XS1_CLKBLK_1                              };                                 on tile[0]: port shutdown = XS1_PORT_4E;     Data Passing Over Channel (c_rx_tx)+++++++++++++++++++++++++++++++++++The ``module_canopen``, when it receives a message from CANopen Master using the channel, processe the data according to the type of message received and write the inforamtion to the object dictionary. The type of data expected over the channel is:Received Messages:   * NMT    * SYNC (Synchronous Message)   * LSS (Layer Service Settings)   * SDO (Service Data Objects)   * RPDO (Receive Process Data Objects)   * NODE GUARDTransmit Messages:   * TPDO (Transmit Process Data Objects)   * SDO (Service Data Objects)   * EMCY (Emergency Messages)   * NODE GUARD    * HEARTBEAT Data passing over channel (c_application)+++++++++++++++++++++++++++++++++++++++++The ``module_canopen``, when it receives a message from Application using the channel, processes them based on PDO number of the message and write the received inforamtion into the object dictionary based on the transmit type. The different types of PDO Transmit types are:   * Acyclic Synchronnous   * Cyclic Synchronous   * RTR request Asynchronous   * RTR request Synchronous   * Asynchronous   