Programming Guide=================Installing the component------------------------The *CANopen Slave* component can be installed via the xSOFTip browser in the xTIMEcomposer or downloaded via http://www.xmos.com.Using the Module----------------To use the module you need to add ``module_canopen``, ``module_can`` and ``module_mutual_thread_comm``  to the ``USED_MODULES`` variable in your application Makefile.*Files*``can_conf.h``   Include this file in your application to run the CAN Server on a logical core.``canopen_conf.h``   Have this file in your application and set the configuration defines as described in the :ref:`canopen_api` section.   ``object_dictionary.h``   Have this file in your application and set the configuration settings ot the object dictionary as described in the :ref:`canopen_api` section.   *Constants* - CANOPEN_NODE_ID : Define the constant in ``canopen_conf.h`` file to set the node id of the CANopen slave. - CANOPEN_NUMBER_OF_TPDOS_SUPPORTED : Define the constant in ``canopen_conf.h`` file to set the total number of TPDOs for CANopen slave. - CANOPEN_NUMBER_OF_RPDOS_SUPPORTED : Define the constant in ``canopen_conf.h`` file to set the total number of RPDOs for CANopen slave. - CANOPEN_MAX_DATA_BUFFER_LENGTH : Define the constant in ``canopen_conf.h`` file to set the size of data buffer. *Ports*The application must define ports to use for CAN interface. CAN ports can be defined as (sample)::    on tile[0]: can_ports p = {                                XS1_PORT_1L,                                 XS1_PORT_1I,                                 XS1_CLKBLK_1                              };                                 on tile[0]: port shutdown = XS1_PORT_4E;     *Data Over Channel (c_rx_tx)*The ``module_canopen``, when it receives a message from CANopen Master using the channel, processes them according to the type of message received and write th inforamtion to the object dictionary based on the type of the emssage received. The type of data it receives over the channel is:- NMT Message- SYNC Message- Node Guard / Heartbeat MEssage- TPDO Messages- RPDO Messages- EMCY Messages- SDO Messages*Data Over Channel (c_application)*The ``module_canopen``, when it receives a message from Application using the channel, processes them based on PDO number of the message and write the received inforamtion into the object dictionary based on the transmit type. The different types of PDO Transmit types are:- Acyclic Synchronnous- Cyclic Synchronous- RTR request Asynchronous- RTR request Synchronous- Asynchronous   Demo applications-----------------A Demo application is supplied with the component that implements an application to get CANopen messages from a Host (CANopen Master) application (CANdoISO) and uses a ``XA-SK-GPIO`` sliceCARD with ``XA-SK-ISBUS`` to:- Turn GPIO sliceCARD LEDS ON and OFF- Read the ADC values from the temperature sensor which is on GPIO sliceCARD- Receive GPIO sliceCARD button presses informationIt is available in the xSOFTip browser as:- CANopen Demo: Please read the CANopen Demo Quickstart Guide for further infomration on using this demo.